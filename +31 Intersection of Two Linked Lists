https://www.codingninjas.com/codestudio/problems/intersection-of-two-linked-lists_8230688?challengeSlug=striver-sde-challenge

M-1 MOST OPTIMISED

Node* findIntersection(Node* headA,Node* headB){
    if(headA==NULL || headB==NULL)
      return NULL;
    
    Node* a=headA;
    Node* b=headB;
    //we r doing it so that they come at same junction and intersecrtion is found
    while(a!=b){
        a=(a==NULL?headB:a->next);
        b=(b==NULL?headA:b->next);
    }
    return a;
}

TC - O(2N)
SC - O(1)

M-2 

Node* findIntersection(Node *first, Node *second)
{
    if(first==NULL || second==NULL)
      return NULL;

    //find len of both
    int len1=0,len2=0;
    Node* curr1=first;
    Node* curr2=second;
    while(curr1!=NULL || curr2!=NULL){
        if(curr1!=NULL){
            len1++;
            curr1=curr1->next;
        }
        if(curr2!=NULL){
            len2++;
            curr2=curr2->next;
        }
    }  
    
    int diff=len1-len2;

    curr1=first;
    curr2=second;
    
    //len1 is ahead
    if(diff>0){
        //equalise len1
        while (diff-- ) {
          curr1 = curr1->next;
        }
    }

    //len2 is ahead
    else if(diff<0){
        diff=abs(diff);
        //equalise len2
        while(diff-- ){
            curr2=curr2->next;
        }
    }

    while(curr1!=NULL && curr2!=NULL && curr1!=curr2){
        curr1=curr1->next;
        curr2=curr2->next;
    }
       return curr1;   
}
