https://www.codingninjas.com/codestudio/problems/count-inversions_8230680?challengeSlug=striver-sde-challenge&leftPanelTab=0

#include <bits/stdc++.h>
long long merge(long long *arr, int low, int mid, int high) {
    int left, right;
    left = low;
    right = mid + 1;
    long long count = 0;
    vector<long long> temp;
    while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        } else {
            temp.push_back(arr[right]);
            right++;
            count += (mid - left + 1);  // Increment the count for inversions
        }
    }

    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }
    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }
    for (int i = low; i <= high; i++) {
        arr[i] = temp[i - low];
    }
    return count;
}

long long merges(long long *arr, int low, int high) {
    long long count = 0;
        if (low < high) {
        int mid = low+(high-low)/2;
        count += merges(arr, low, mid);      //cnt left part se inversions
        count += merges(arr, mid + 1, high); //cnt right part se inversions
        count += merge(arr, low, mid, high); //cnt total inversion of curr arr
    }
    return count;
}

long long getInversions(long long *arr, int n) {
    return merges(arr,0,n-1);
}
