//https://www.codingninjas.com/codestudio/problems/n-queens_8230707?challengeSlug=striver-sde-challenge&leftPanelTab=0
    
    void addSolution(vector<vector<int>>&ans,vector<vector<int>>&board,int n){
        vector<int>temp;
        for(int j=0;j<n;j++){
            for(int i=0;i<n;i++){
                temp.push_back(board[i][j]);
            }
        }
        ans.push_back(temp);
    }
    
    bool isSafe(int row, int col, vector<vector<int>> &board, int n){
        int x = row;
        int y = col;
        //col check krne ki zarurat nhi h kyunki har col me sirf 1 element ko 
        //place krke aage badh rahe hn 

        //row check
        while(y>=0){
            if(board[x][y]==1) 
                return false;
            else 
                y--;
        }
        
        //lower left diagonal checking
        x = row;
        y = col;
        
        while(x<n && y>=0){
             if(board[x][y]==1) 
                return false;
             else
                 y--, x++;
        }
        
        //upper left diagonal 
        x = row;
        y = col;
        
        while(x>=0 && y>=0){
             if(board[x][y]==1) 
                return false;
             else
                 y--, x--;
        }
        
        return true;
    }

    void solve(int col, vector<vector<int>> &ans,vector<vector<int>> &board, int n){
        
        //base case
        if(col == n){
            addSolution(ans,board,n);
            return;
        }
        
        //solve 1 case
        for(int row=0;row<n;row++){
            if(isSafe(row,col,board,n)){
                board[row][col] = 1;
                solve(col+1,ans,board,n);
                board[row][col] = 0;
             }
          }   
    }
    
    vector<vector<int>> solveNQueens(int n) {
        vector<vector<int>> board(n,vector<int>(n,0));
        vector<vector<int>>ans;
        solve(0,ans,board,n);
        return ans;
    }

TC - O(N!)
SC - O(N*N)
